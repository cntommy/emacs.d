+++
title = "从零开始使用emacs"
author = ["Jun Gao"]
date = 2022-10-11T16:37:00+08:00
draft = false
+++

## 为什么选择emacs {#为什么选择emacs}

接触emacs是因为在一次组会上听到付老师用它作为科研笔记和文献管理的工具，由于其双链的功能和对latex的支持非常适合梳理一些杂乱的思路和生成论文，因此想学习一下，虽然传言学习曲线非常陡峭。

{{< figure src="/ox-hugo/screenshot20221021-200606_.png" >}}

本笔记的目的是记录刚开始使用emacs的一些坑和常用功能。
最开始分别用过apple备忘录、有道云、onenote作为科研的笔记软件，感受到最大的痛点就是：树状笔记管理非常麻烦，得提前归档好目录供每个笔记选择。其次就是同步慢、对代码支持不够好等等小毛病，因此就像选一个能够不用树状来管理笔记的软件，双链笔记就进入了我的考虑范围。在对比了logseq、obsidian和emacs之后，发现还是emacs上限更高，想下决心试试。

|          | org-mode | 搜索 | 稳定性 | html导出 | 学习曲线 | latex支持 | 代码实时运行 |
|----------|----------|----|-----|--------|------|---------|--------|
| emacs    | 支持     | 全局 | 好    | 支持   | 陡峭 | 全集    | 支持   |
| logseq   | 支持     | 全局 | 会有bug | ？     | 稍简单 | 子集    | 不支持 |
| obsidian | 不支持   | 文件 | 好    | ？     | 稍简单 | 子集    | 不支持 |


## 三种安装emacs的方式 {#三种安装emacs的方式}

按照对新手的友好程度划分应该是：spacemacs&gt;GNU emacs(purcell配置)&gt;GNU emacs(自己配置)。
spacemacs据说是对vim用户特别适合，新手下载了也能直接用，但是我刚开始不知道所以就没进行尝试；
我最开始是走的GNU emacs（自己配置）这条路，配环境大概花了一周的时间，优化又花了一周的时间，发现还是有用着不顺手的地方；
知道我看到了有人推荐purcell大神的配置，下载下来发现基本的功能都配置好了，虽然好多地方也要自己优化，但是工作量少多了；
下面我介绍一下后两种的安装方式。
ps:后期发现官方emacs在macos上使用中文输入法会有bug，使用emacs-macport应该会更兼容[^fn:1]


### GNU emacs（自己配置） {#gnu-emacs-自己配置}

首先使用brew命令安装emacs,'--cask'表示安装带有图形界面的软件，如果安装比较慢可以考虑给brew换国内源[^fn:2]

```nil
brew update
brew install --cask emacs
```

安装完成之后界面确实看着不好看，于是就照着教程重新配置了外观

```nil
cd ~
rm -rf .emacs   #如果手动修改过emacs的配置可能会产生这个文件，删除可以避免后面的配置文件失效
cd ~/.emacs.d
touch init.el   #创建配置文件
```

接着打开emacs，输入C-x C-f，会等待输入打开的文件，输入~/.emacs.d/init.el &lt;RET&gt;，输入命令刷新安装包列表

```nil
M-x package-refresh-contents
```

再把下面的配置代码粘贴到文件中

```emacs-lisp
;; 窗口最大化
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; 系统共享剪切板
;; see also:
;;   https://www.emacswiki.org/emacs/CopyAndPaste
;;   https://www.reddit.com/r/emacs/comments/5n9t3f/copypaste_from_system_clipboard_on_windows/
(defun copy-from-osx ()
  (shell-command-to-string "pbpaste"))

(defun paste-to-osx (text &optional push)
  (let ((process-connection-type nil))
    (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
      (process-send-string proc text)
      (process-send-eof proc))))

(cond
 ((memq window-system '(x))
  (setq x-select-enable-primary t
        x-select-enable-clipboard nil))
 ((memq window-system '(mac ns))
  (setq interprogram-cut-function 'paste-to-osx
        interprogram-paste-function 'copy-from-osx))
 ((memq window-system '(win32 pc))
  (setq select-enable-primary t
        select-enable-clipboard t
        save-interprogram-paste-before-kill t)))

;; 指定自定义配置文件，防止自定义配置污染 init.el，并加载该配置文件
(setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
(if (file-exists-p custom-file)
    (load custom-file))

;; Font
;; Download Victor Mono at https://rubjo.github.io/victor-mono/
(set-face-attribute 'default nil :height 170 :weight 'normal)
;; (set-face-attribute 'default nil :family "Victor Mono" :height 170 :weight 'normal)

;; 中文显示
(set-language-environment "utf-8")
(set-buffer-file-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-clipboard-coding-system 'utf-8)
(modify-coding-system-alist 'process "*" 'utf-8)
(prefer-coding-system 'utf-8)
(setq-default pathname-coding-system 'utf-8)
(setq
 default-process-coding-system '(utf-8 . utf-8)
 locale-coding-system 'utf-8
 file-name-coding-system 'utf-8
 default-buffer-file-coding-system 'utf-8
 slime-net-coding-system 'utf-8-unix)

(setenv "LC_CTYPE" "UTF-8")
(setenv "LC_ALL" "en_US.UTF-8")
(setenv "LANG" "en_US.UTF-8")                           ; Iterate through CamelCase words

;; 基本设置
(setq-default
 indicate-buffer-boundaries 'left ;; 在窗口边缘上显示一个小箭头指示当前 buffer 的边界
 delete-by-moving-to-trash t                      ;; 删除文件移动到垃圾箱
 window-combination-resize t                      ;; 新窗口平均其他左右窗口
 x-stretch-cursor t                               ;; 将光标拉伸到字形宽度
 kill-whole-line t)  ;; C-k时,同时删除该行

;;; Tidy workdir
(make-directory "~/.emacs.d/data/backup/" t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/data/backup/" t)) ; Write auto-save files to a separate directory
      backup-directory-alist '(("." . "~/.emacs.d/data/backup/"))          ; Write backup files to a separate directory
      create-lockfiles nil                                                 ; Disable lockfiles as I use only one Emacs instance
      )

(setq
 fringes-outside-margins t   ;; fringe 放在外面
 echo-keystrokes 0.1         ;; 尽快显示按键序列
 system-time-locale "zh_CN"  ;; 设置系统时间显示格式
 tab-always-indent 'complete ;; Tab 键优先格式化再补全
 font-lock-global-modes '(not shell-mode text-mode) ;; 设置语法高亮.除shell-mode和text-mode之外的模式
 mouse-yank-at-point t       ;; 不在鼠标点击的地方插入剪贴板内容
 kill-ring-max 200           ;; 设置 kill ring 个数
 default-fill-column 60      ;; 把fill-column设为60.让文字更好读
 enable-recursive-minibuffers t  ;; 递归的使用minibuffer
 scroll-margin 3             ;; 在靠近屏幕边沿 3 行时就开始滚动,可很好看到上下文
 scroll-conservatively 10000 ;; 防止页面滚动时跳动
 select-enable-clipboard t   ;; 允许emacs和外部程序进行粘贴
 track-eol t                 ;; 当光标在行尾上下移动的时候,始终保持在行尾
 next-line-add-newlines nil  ;; 按C-n或down时不添加新行
 ;; emacs启动时显示的内容可以通过变量initial-scratch-message来设置
 initial-scratch-message nil
 dired-listing-switches "-vha" ;;  dired 列出文件的参数（man ls）
 show-paren-style 'parenthesis ;; 括号匹配时高亮显示另一边的括号，而不是跳到另一个括号处
 undo-limit 80000000           ;; 提升撤销限制
 auto-save-default t           ;; 打开自动保存
 truncate-string-ellipsis "…"  ;; Unicode ellispis are nicer than "...", and also save /precious/ space
 ;; 当寻找一个同名的文件,改变两个buffer的名字,前面加上目录名
 uniquify-buffer-name-style 'post-forward-angle-brackets)
(if (display-graphic-p)
    (progn
      (menu-bar-mode -1)            ;; 取消菜单栏
      (scroll-bar-mode -1)          ;; 取消滚动条（在 Emacs 26 中无效）
      (tool-bar-mode -1)))          ;; 取消工具栏
(fset 'yes-or-no-p 'y-or-n-p) ;; 按y或space表示yes,n表示no
(global-font-lock-mode t)     ;; 语法高亮
(show-paren-mode t)           ;; 打开括号匹配显示模式
(mouse-avoidance-mode 'animate) ;; 鼠标靠近光标指针时,让鼠标自动让开
(auto-compression-mode 1) ;; 打开压缩文件时自动解压缩
(global-auto-revert-mode 1)       ;; 自动重载更改的文件
(blink-cursor-mode -1)            ;; 指针不要闪
(toggle-truncate-lines t)         ;; 当一行文字太长时,不自动换行
(column-number-mode t)            ;; 在minibuffer上面的状态栏显示文件的行号,列号
(line-number-mode t)              ;;设定显示文件的参数,以版本/人性化的显示,就是ls的参数
(global-linum-mode t)             ;; 显示行号
(require 'saveplace)
(save-place-mode 1)               ;; 记住上次打开文件光标的位置
(global-subword-mode 1)           ;; 拆分连字符：oneWord 会被当作两个单词处理

;; 设置4个空格缩进
(setq-default indent-tabs-mode nil)
(setq tab-width 4) ; or any other preferred value

;; 时间显示设置
(display-time-mode 1)   ;; 启用时间显示设置,在minibuffer上面的那个杠上
(setq display-time-24hr-format t   ;; 时间使用24小时制
      display-time-day-and-date t   ;; 时间显示包括日期和具体时间
      display-time-use-mail-icon t   ;; 时间栏旁边启用邮件设置
      display-time-interval 10   ;; 时间的变化频率
      display-time-format "%A %H:%M")   ;; 显示时间的格式

(unless (string-match-p "^Power N/A" (battery))   ; 笔记本上显示电量
  (display-battery-mode 1))
```

然后再执行M-x eval-buffer，可以看到emacs外观的变化，这样就修改成功了。
下一步就是安装几个外观的插件，由于straight.el包管理一直报错，折腾一会之后打算还是用内置的package.el来管理包，再之前的文件后追加内容：

```emacs-lisp
;; use-package安装
(add-to-list 'load-path "~/.emacs.d/site-lisp/use-package")
(require 'use-package)

(with-eval-after-load 'info
  (info-initialize)
  (add-to-list 'Info-directory-list
               "~/.emacs.d/site-lisp/use-package/"))

;; 设置源
(require 'package)
(add-to-list 'package-archives
'("melpa-stable" . "https://stable.melpa.org/packages/"))

(use-package all-the-icons :ensure t)

(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-vibrant t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))



(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))

;; (use-package nyan-mode)

(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
;;(setq dashboard-center-content t)
;;(setq dashboard-set-heading-icons t)
;;(setq dashboard-set-file-icons t)
;;(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

(setq my/all-notes "~/notes/")

(require 'org-tempo)
(use-package org
  :bind
  ;; 冲突
  ;; ("C-c c" . org-capture)
  ;; ("C-c a o" . org-agenda)
  ("C-c C-." . org-mark-ring-goto)
  :custom
  (org-startup-indented t)
  (org-hide-leading-stars t)
  (org-odd-level-only nil)
  (org-insert-heading-respect-content nil)
  (org-M-RET-may-split-line '((item) (default . t)))
  (org-special-ctrl-a/e t)
  (org-return-follows-link nil)
  (org-use-speed-commands t)
  (org-startup-align-all-tables nil)
  (org-log-into-drawer nil)
  (org-tags-column 1)
  (org-ellipsis " \u25bc" )
  (org-speed-commands-user nil)
  (org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
  (org-completion-use-ido t)
  (org-indent-mode t)
  (org-startup-truncated nil)
  :custom-face
  (org-headline-done ((nil (:strike-through t))))
  :init
  (require 'org-id)
  (defun my/org-id-update-id-locations-current-dir()
    "Update id locations from current dir."
    (interactive)
    (org-id-update-id-locations (directory-files "." t "\.org\$" t)))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t))))

(setq org-roam-database-connector 'sqlite3)

(use-package org-roam
  :ensure t
  :config
  ;; If using org-roam-protocol
  (require 'org-roam-protocol)
  :bind
  ("C-c n l" . org-roam-buffer-toggle)
  ("C-c n f" . org-roam-node-find)
  ("C-c n g" . org-roam-graph)
  ("C-c n i" . org-roam-node-insert)
  ("C-c n c" . org-roam-capture)
  ;; Dailies
  ("C-c n j" . org-roam-dailies-capture-today)
  :custom
  (org-roam-v2-ack t)
  (org-roam-directory (string-join (cons my/all-notes '("content-org")) "/"))
  (org-roam-capture-templates `(("d" "default" plain "%?"
                                 :unnarrowed t
                                 :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                                    "#+TITLE: ${title}
#+AUTHOR: Jun Gao
#+DATE: %U
#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: notes
")))))

(use-package org-superstar
  :hook
  (org-mode . (lambda () (org-superstar-mode 1))))
```

中间有一些设置因为报错先注释掉了，准备之后有时间再慢慢调教，当务之急还是先学习做笔记的功能，增加完上述代码之后再次执行

```nil
M-x eval-buffer
```

然后安装一下all-the-icons的字体

```nil
M-x all-the-icons-install-fonts
```

就能开始愉快的做笔记啦！

主要参考了[^fn:3]


### GNU emacs(purcell 配置) {#gnu-emacs--purcell-配置}

按照上一种方法，用brew安装好emacs之后，就没有那么复杂了，只要将原有的 `.emacs.d` 目录替换为purcell的就可以：

```nil
$ cd ~
$ mv .emacs.d .emacs.d.bak
$ git clone https://github.com/purcell/emacs.d.git ~/.emacs.d
```

然后打开emacs，等待几分钟就能快速得到一个好用的环境啦，但是估计得熟悉一下。
看了界面我感觉还是挺顺眼的，就没有换别的主题，各种补全的也比我之前自己配的好用，下面附一张图：

![](/ox-hugo/20221026-220446_screenshot.png)
之后就是漫漫的优化之路了，我还没有完全优化好，所以就没把后续写上来了，但是现在已经不影响使用了。


### spacemacs等 {#spacemacs等}


## 常用功能 {#常用功能}

我的需求是用来做科研笔记，同时可能记录一些日常，接下来从软件的界面到功能进行记录：


### window&amp;frame操作 {#window-and-frame操作}

-   软件界面及相关术语

    | 术语       | 解释              |
    |----------|-----------------|
    | buffer     | 缓冲，完成编辑操作的区域 |
    | frame      | 用了感觉是新的窗口的意思 |
    | window     | 特定frame下的子窗口，可以嵌套 |
    | minibuffer | 底部输入指令的区域 |

    ```nil
    全屏当前frame？
    C-x o   切换window   C-x 5 o   切换frame
    C-x 0   删除当前window   C-x 5 0   删除当前frame
    C-x 1   只保留当前window   C-x 5 1   只保留当前frame
    C-x 2   上下分裂window   C-x 5 2   分裂frame
    C-x 3   左右分裂window

    C-x C-b   列出所有的buffer
    C-x C-c   退出emacs（不保留没关联的buffer？）
    ```


### 帮助 {#帮助}

```nil
C-h b   查看当前buffer的快捷键
```


### 编辑操作 {#编辑操作}

```nil
C-a C-k C-k   删除一行（不留空行）   C-u 3 C-k   删除3行（不留空行）
C-@   标记选择
C-w   剪切
M-w   复制
C-y   粘贴   M-y   替换粘贴内容为更早的kill
C-/   撤销
C-q   输入控制字符，如TAB
M-x replace-s<RET>before<RET>after<RET>   替换光标后的所有字符串
M-x xxx-mode   切换为xxx major/minor mode
C-s   查找   全局查找？
C-x n s   聚焦当前字内容
C-x n w   退出聚焦
C-c C-x f   当前point添加脚注，并跳转

```


### 移动 {#移动}

```nil
C-f   后一个字符
C-b   前一个字符
M-f   后一个单词
M-b   前一个单词
C-n   下一行
C-p   上一行

C-a   行开头
C-e   行结尾
M-a   句子开头
M-e   句子结尾，这两个命令对上下移动比较快速
M-g g   根据行号跳转
C-c C-n   移动到下一个标题
C-c C-f   移动到同等级的下一个标题
C-c C-x C-n   移动到下一个链接
```


### 代码操作 {#代码操作}

```nil
C-c '   在新窗口中打开代码块
C-c C-k   关闭代码块的编辑窗口
<s <RET>   代码块自动生成，需要(require 'org-tempo)

```

babel[^fn:4]


#### python mode {#python-mode}

```nil
C-c C-p   打开python解释器
C-c C-c   执行代码

```


### 标题操作[^fn:5] {#标题操作}

```nil
M-RET   插入同级标题
M-S-RET   插入同级TODO标题
M-LEFT/RIGHT   将标题升级/降级
M-S-LEFT/RIGHT   将子树升级/降级
M-S-UP/DOWN   将子树上/下移
C-c C-w   将子树或区域移到另一标题（跨缓冲区）
```


### 目录&amp;文件操作[^fn:6] {#目录-and-文件操作}

```nil
M-S-d   浏览特定目录
C-x C-f   打开文件
C-x C-s   保存文件
C-x s   询问每个和file关联的buffer要不要保存
M-x recover-this-file<RET>   恢复文件   M-x recover-file<RET>filename<RET>
M-x ediff-files   比较两个文件   j   跳到第一个差异处   <SPA>   下一个差异处
& open   在mac上用默认的app打开文件
C－c C－l
```

dired[^fn:7]

```nil
;; 目录树
(package-install 'neotree)
(global-set-key [f8] 'neotree-toggle)
```

```nil
U   进入上一级目录
g   刷新
C-c C-n   创建目录或文件
C-c C-d   删除目录或文件
C-c C-r   重命名目录或文件
```

<http://blog.lujun9972.win/blog/2016/12/10/emacs%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%A5%9E%E5%99%A8--dired%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/>


### 截图、插入图片并显示[^fn:8]<sup>, </sup>[^fn:9] {#截图-插入图片并显示}

首先在init中配置org-download，然后用brew安装pngpaste，就能实现C-M-y快捷键截图插入，同时保存在"~/notes/images"目录下

```nil
;; 图片管理
(package-install 'org-download)
(use-package org-download
  :ensure t
  :config
  ;; Drag-and-drop to `dired`
  (add-hook 'dired-mode-hook 'org-download-enable)
  (require 'org-download)
  :custom
  (org-download-method 'directory)
  (org-download-image-dir "~/notes/images")
  (org-download-heading-lvl nil)
  (org-download-timestamp "%Y%m%d-%H%M%S_")
  ;; 将图片显示大小固定位屏幕宽度的三分之一
  (org-image-actual-width (/ (display-pixel-width) 3))
    (org-download-screenshot-method "/usr/local/bin/pngpaste %s")
  :bind
  ("C-M-y" . org-download-screenshot))
```

图片插到文中之后，还可以通过C-c C-x C-v设置显示的方式是连接还是原图


### node相关操作 {#node相关操作}

```nil
C-c n f   查找/新建node
C-c n i   在buffer中插入node
C-c C-c   确认
C-c C-k   取消
C-c C-o   跳转到光标所在node
C-c C-.   返回到之前的node
C-c n l   调出backlink
C-c C-l   插入\编辑超链接
C-c l   存储当前位置链接

```

主要参考了以下博客：
[org-mode](https://www.zmonster.me/2015/07/12/org-mode-introduction.html)


### 表格操作 {#表格操作}

```nil
C-c '   在buffer中编辑
C－u C-c C-c   计算整个表格
@row$colum=1;%d   单元格保留整数
S-ENTER   顺序填充

```

参考[^fn:10]


### 文献管理 {#文献管理}

看了网上的推荐之后，决定试一试zotero+zotxt-emacs
首先给zotero安装zotxt插件，用于和emacs关联，同时给emacs安装zotxt，在init文件中添加

```nil
;; 文献管理
(package-install 'zotxt)
```

然后让init文件生效，同时打开zotxt的minor mode

```nil
M-x eval-buffer
M-x org-zotxt-mode
```

为了生成pdf时能自动生成引用编号，还需要给zotero安装 pandoc-zotxt.lua 和 Better BibTeX插件，常用的操作有下面这些

```nil
C-c " i   检索zotero文献库，并插入条目
C-c " a   打开文献
C-c " u   从zotero库更新当前连接
```

由于zotero官方给的文献同步空间只有300MB，可能用了一段时间会不够用，又不知道怎么利用syncthing来给zotero用，坚果云免费版每月有1G上传流量，3G下载流量，空间不限，感觉还是比较够用的，参考网上的教程配置一下[^fn:11]。
除此之外还发现了zotero有给文献重命名的插件[^fn:12]，试了之后发现非常好用！

-   过程中的问题
    emacs打开代理后会对zotxt造成影响，还不知道怎么解决

<https://emacs-china.org/t/emacs/12580>
<https://zhuanlan.zhihu.com/p/526795352?utm_id=0>
<https://zhuanlan.zhihu.com/p/351003732>


### github备份，坚果云同步 {#github备份-坚果云同步}

尝试了最简单暴力的方法，直接将文件夹~/notes上传到github，然后在新电脑上应用init.el的配置（后面有更好的同步方案），然后git pull仓库后执行：

```nil
M-x org-roam-db-sync
```

但是这种方法比较麻烦，适合低频率使用。
syncthing如果有一台一直能连上的终端作为服务器很适合作为日常的同步方案，但是因为我需要在校内外不同的环境用，syncthing虽然有内网穿透功能感觉还是不稳定
坚果云（WebDAV功能）目前看来是比较适合我的方案，虽然每个月流量不多，但是同步速度很快，也不用担心连不上服务器的问题，配合ios端的beorg使用还能无缝衔接移动设备[^fn:13]
除此之外还有别的同步方案，感兴趣可以自行探索[^fn:14]。


### 进度管理 {#进度管理}

为了对不同的项目进度进行概览，准备试一下org-mode的任务管理用法，同时记录一些快捷键，参考了这两篇教程[^fn:15] <sup>, </sup>[^fn:16]

```nil
C-c C-t   改变标题任务状态标记   S-LEFT/RIGHT
C-c C-w   将当前光标标题及子树移到更高级标题下
S-UP/DOWN   改变任务优先级

[%]   [/]   跟踪当前任务下子任务的情况
M-S-<RET>   插入带复选框的同级列表
C-c C-c   列表：改变复选框状态/headline：设置标签
C-c -   改变列表的展示方式


M-S-<RET>   增加一个子项   C-S-<RET>   在当前子项内容后增加子项
C-c /   大纲检索（状态或关键词）
C-c <   输入当前日期时间戳
C-c >   查看日历   S-LEFT/RIGHT/UP/DOWN   调整日期
C-c !   仅输入日期
--   定义时间段
C-c C-y   计算时间间隔
C-c C-s +1d 10am   设定任务计划时间
C-c C-d   设定任务deadline
C-- 1 C-c C-t   设定重复任务完成

C-c a t   进入全局TODO列表   t   改变任务状态   <RET>跳到源文件   跳回？
C-c a a   进入日程表视图   l   显示日志(完成时间）
C-c C-x C-c   打开column view   g   刷新
C-c C-c   q   退出column view
```

首先修改一下定义任务状态的关键词，在init中添加

```emacs-lisp
(setq org-todo-keywords
'((sequence "TODO(t)" "ONGOING(o)" "MAYBE(m)" "WAIT(w)" "DELEGATED(d)" "|"
    "DONE(f)" "CANCELLED(c)" "STUCK(s)")))
```

然后重启一下emacs就能生效，如果要增加时间戳在关键字后面加！就行，如"TODO(t！)"，如果需要增加切换状态说明，则加@（都加用/分隔）
为了方便全局的任务管理，可以根据自己的目录配置全局的清单和快捷键

```emacs-lisp
;; 配置全局任务文件清单和快捷键
(setq org-agenda-files (list "~/notes/content-org/"))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
;; 禁用任务组标签继承
(setq org-tags-exclude-from-inheritance '("TG"))
```

接下来修改视图的显示

```nil
;; Skip entries which only have timestamp but no TODO keywords.
(defun tjh/org-agenda-skip-only-timestamp-entries ()
(org-agenda-skip-entry-if 'nottodo 'any))

;; Skip entries which are not deadlines.
(defun tjh/org-agenda-skip-not-deadline-entries ()
 (org-agenda-skip-entry-if 'notdeadline))

;; Skip entries which are not finished.
(defun tjh/org-agenda-skip-unfinished-entries ()
 (org-agenda-skip-entry-if 'nottodo '("DONE")))

;; Skip unscheduled entries.
(defun tjh/org-agenda-skip-scheduled-entries ()
 (org-agenda-skip-entry-if 'timestamp
               'todo '("ONGOING" "WAIT" "DELEGATED")
               'regexp ":TG:"))

(setq org-agenda-custom-commands
    '(
         ;; Display general agenda for each project.
      ("A" . "Default agenda view")
      ("Aa" "Agenda for all projects"
       agenda ""
       ((org-agenda-skip-function 'tjh/org-agenda-skip-only-timestamp-entries)
        (org-agenda-overriding-header "Agenda for all projects: "))
       "~/notes/content-org/org-html-exports/Agenda-All.html")

       ;; Display all tasks with deadline.
       ("D" . "Agenda view for deadlines")
       ("Da" "Agenda view for all deadlines"
        agenda ""
        ((org-agenda-skip-function 'tjh/org-agenda-skip-not-deadline-entries)
         (org-agenda-overriding-header "All deadlines: "))
       "~/notes/content-org/org-html-exports/Deadline-All.html")

       ;; Display all finished tasks.
       ("F" . "Agenda view for finished tasks")
       ("Fa" "Agenda view for all finished tasks"
        agenda ""
        ((org-agenda-skip-function 'tjh/org-agenda-skip-unfinished-entries)
         (org-agenda-overriding-header "All finished tasks: "))
        "~/notes/content-org/org-html-exports/Done-All.html")

       ;; Inbox for displaying unscheduled tasks.
       ("I" . "Inbox")
       ("Ia" "Inbox for all unfinished TODOs"
        alltodo ""
        ((org-agenda-skip-function 'tjh/org-agenda-skip-scheduled-entries)
         (org-agenda-overriding-header "Inbox items: "))
        "~/notes/content-org/org-html-exports/Inbox-All.html")
      ))

```

更多column view的命令可以参考[^fn:17]
有时间可以看看<http://doc.norang.ca/org-mode.html>


## 进阶功能 {#进阶功能}


### hugo生成博客 {#hugo生成博客}

1.  安装插件
    为了把笔记导出到网站，需要用到[ox-hugo](https://github.com/kaushalmodi/ox-hugo)插件，在init.el中添加
    ```nil
    (use-package ox-hugo
      :ensure t   ;Auto-install the package from Melpa
      :pin melpa  ;`package-archives' should already have ("melpa" . "https://melpa.org/packages/")
      :after ox)
    ```
    然后执行 `M-x eval-buffer`
    现在就可以写一篇用于博客发布的org笔记了，写完之后需要转化为 `.md` 文件才能发布到博客，因为我需要导出到博客的笔记暂时还比较少，打算先用单独添加的方法，只需在需要发布的org文件结尾添加
    ```nil
    ​* COMMENT Local Variables :ARCHIVE:
    # Local Variables:
    # eval: (org-hugo-auto-export-mode)
    # End:

    ```
    如果想要对所有的org文件都执行自动保存用于发布，可以参考[^fn:18]。
    接下来执行 `C-x C-s` 保存文件就能在minibuffer看到文件已导出到 `.md` 文件（如果没有重新打开一下emacs）
2.  创建git仓库
    这一步是为了之后能用到[github pages](https://docs.github.com/cn/pages)进行发布。首先要安装git，然后到github新建一个名为 `username.github.io` 的仓库，其中 `username` 是你自己的github用户名，如我的[cntommy.github.io](https://cntommy.github.io/docs/)
    ```nil
    $ cd ~/notes
    $ git init   #进行仓库初始化
    $ git remote add origin https://github.com/<username>/<username>.github.io.git
    $ git add . && git commit -m 'init'
    $ git push origin main

    ```
    然后配置 `github action` 进行自动化发布
    ```nil
    $ cd ~/notes
    $ mkdir -p .github/workflows

    ```
    打开emacs执行 `C-x C-f ~/notes/.github/workflows/main.yml RET` ，把下面的内容[^fn:19]粘贴进去，按 `C-x C-s` 保存
    ```nil
    name: github pages

    on:
      push:
        branches:
    ​      - main  # Set a branch to deploy
      pull_request:

    jobs:
      deploy:
        runs-on: ubuntu-22.04
        steps:
    ​      - uses: actions/checkout@v3
            with:
              submodules: true  # Fetch Hugo themes (true OR recursive)
              fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod

          - name: Setup Hugo
            uses: peaceiris/actions-hugo@v2
            with:
              hugo-version: 'latest'
              # extended: true

          - name: Build
            run: hugo --minify

          - name: Deploy
            uses: peaceiris/actions-gh-pages@v3
            if: github.ref == 'refs/heads/main'
            with:
              github_token: ${{ secrets.GITHUB_TOKEN }}
              publish_dir: ./public

    ```
    接下来再执行 `C-x C-f ~/notes/config.toml RET` 调整配置，并保存
    ```nil
    baseURL = "http://username.github.io/"     # 替换 username 为你自己的用户名
    ```
    最后打开github对应仓库的setting，把pages的branch修改为hugo默认的gh-pages

    {{< figure src="/ox-hugo/screenshot20221021-211258_.png" >}}
3.  配置主题
    在网上看到了比较喜欢的[zdoc](https://zzo-docs.vercel.app)主题，颜值和实用性都比较高，就是配置起来会稍微麻烦一点，预览图如下所示，接下来开搞！

    ![](/ox-hugo/screenshot20221021-204130_.png)
    首先在需要给当前的仓库添加主题子模块
    ```nil
    $ cd ~/notes
    $ git submodule add https://github.com/zzossig/hugo-theme-zdoc.git themes/zdoc
    ```
    然后把 `zdoc/exampleSite/` 目录下的四个文件夹拷贝到hugo的项目根目录 `~/notes` 下，再在 `~/notes/content/en/docs/` 目录中添加 `.md` 笔记文件
    然后提交配置文件和笔记
    ```nil
    $ git add .
    $ git commit -m 'add workflow'
    $ git push origin master
    ```
    就能通过 `username.github.io` 访问了~
    这块内容主要参考了这几篇文章[^fn:20]<sup>, </sup>[^fn:3]
4.  网站访问量统计
    站内访问量可以用[不蒜子](https://busuanzi.ibruce.info)，更详细的统计可以用[google analytics](https://analytics.google.com)。
5.  报错解决
    [hugo启动报错]({{< relref "20221024235407.md" >}})


### 思维导图 {#思维导图}

之前用的是xmind，虽然好看但是编辑起来不是纯文本，而且不是正版用户还老是挂着一个试用期，就想找一下有没有能替代xmind的emacs插件
目前的需求就是生成类似xmind的思维导图，调研了一圈总结如下

| 插件           | 优缺点           |
|--------------|---------------|
| org-mind-map   | 比较丑，很久没有维护了 |
| eaf-mindmap    | 功能强大，但是比较繁琐 |
| org-brain      | 文本形式的图不直观 |
| org-graph-view | 目前感觉还比较简陋 |
| plantuml-emacs | 功能简单实用，但是可能有些bug |

对比下来打算暂时先用 plantuml-emacs，因为上手比较快，之后如果有其他需求再研究


### RSS {#rss}

首先安装crul

```nil
brew install crul
```

然后安装elfeed，同时设置rss源[^fn:21]

```nil
;; elfeed for rss
(package-install 'elfeed)
(setq elfeed-feeds '("http://iccircle.com/feed"))
```

然后就能用M-x elfeed打开使用，其他的一些命令如下

```nil
M-x elfeed-add-feed   添加源
M-x elfeed-update   更新源
M-x elfeed-search-set-filter   修改过滤条件
```

用的过程中发现了问题，没法更新，原因是很多源都不能用了，下面是一些目前还能用的

```nil
("https://www.zhihu.com/rss" zhihu)
;("http://feeds.feedburner.com/zhihu-daily" news)
("https://planet.emacslife.com/atom.xml" emacs)
;("https://www.reddit.com/r/emacs.rss" emacs)
;;("https://www.reddit.com/r/orgmode.rss" emacs)
("https://rsshub.app/rsshub/rss" rss)
("https://rsshub.app/twitter/user/DIYgod" tw)
```

同时还可添加的一些源

```nil
Link: https://docs.rsshub.app/new-media.html#wei-xin
https://www.kexue.fm/feed
```

elfeed-org用于管理rss源[^fn:22]，但是安装出现了一些问题
elfeed-summary用于提供干净的浏览界面

```nil
M-x elfeed-summary   打开浏览界面
R   刷新源
U   批量标记为已读
M-RET   阅读同时保留未读
u   是否只显示未读
```


### magit {#magit}

```nil
s   相当于git add   S   git add .
u   取消git add
c   commit
P   push
g   刷新
F   pull
z   git stash忽略
M-x magit-reset-soft   不删除工作空间改动代码，撤销commit，不撤销git add
M-x magit-reset-mixed   不删除工作空间改动代码，撤销commit，撤销git add
M-x magit-reset-hard   删除工作空间改动代码，撤销commit，撤销git add
M-x magit-commit-amend   修改注释
```

git rm 操作


### 设置代理开关[^fn:23] {#设置代理开关}

setenv


### 中文输入法 {#中文输入法}

pyim在使用过程中发现对某些音的词大气来不方便，rime相比而言会好很多，打算尝试emacs-rime


#### 清除pyim和librime {#清除pyim和librime}


#### 首先安装[鼠须管](https://rime.im/download/)，然后安装最新版的[librime](https://github.com/DogLooksGood/emacs-rime/blob/master/INSTALLATION.org) {#首先安装-鼠须管-然后安装最新版的-librime}


#### 然后在emacs的配置中增加 {#然后在emacs的配置中增加}

```lisp
(require 'rime)
(use-package rime
  :custom
  (default-input-method "rime"))
```


#### 使用rime-open-configuration设置 {#使用rime-open-configuration设置}


## 其他优化 {#其他优化}


### cpu占用高 {#cpu占用高}

偶然有一次发现cpu占用很高，但是最后查不出是什么原因，下面的方法是修改历史缓存，暂时还用不到

```nil
(setq history-length 100)
(put 'minibuffer-history 'history-length 50)
(put 'evil-ex-history 'history-length 50)
(put 'kill-ring 'history-length 25)
```


### 删除当前文件[^fn:24] {#删除当前文件}

```nil
(defun fdx/delete-current-buffer-file ()
    "Removes file connected to current buffer and kills buffer."
    (interactive)
    (let ((filename (buffer-file-name))
          (buffer (current-buffer))
          (name (buffer-name)))
      (if (not (and filename (file-exists-p filename)))
          (ido-kill-buffer)
        (when (yes-or-no-p "Are you sure you want to remove this file? ")
          (delete-file filename)
          (kill-buffer buffer)
          (message "File '%s' successfully removed" filename)))))
```


### org-roam-db-sync {#org-roam-db-sync}

发现每次db都不能自动同步，应该是需要打开M-x org-roam-db-autosync-mode来自动同步


### 文件名和TITLE对齐 {#文件名和title对齐}

如果文件名会插入第一次设置的TITLE，那么后续修改起来会很麻烦，如果文件名默认不带TITLE，那后续就不会有这个麻烦了，而且这个不影响node的索引。[^fn:25]


### 修改node名字 {#修改node名字}

修改TITLE，就能更改node名字，如果要解决文件名不一致的问题，再修改文件名[^fn:26]


### 代码块和headline对齐 {#代码块和headline对齐}


### 打开emacs自动同步node {#打开emacs自动同步node}

```nil
(org-roam-db-autosync-enable)
```


### 修改主题 {#修改主题}

M-x color-theme-sanityinc-tomorrow-eighties 选择主题
M-x customize-themes 保存


## 待实现的需求 {#待实现的需求}

-   手机在node插入东西会生成新node
-   博客评论功能
-   从arxiv自动订阅带关键词的论文
-   ppt制作
    beamer <https://mirrors.ustc.edu.cn/CTAN/macros/latex/contrib/beamer/doc/beameruserguide.pdf>
    模板 <https://www.overleaf.com/latex/templates/ruc-beamer-theme/ssryphkjpyjt>
    <https://www.youtube.com/watch?v=vz9aLmxYJB0>
-   笔记模板
-   跨行显示
-   订阅要买的东西的价格
-   字数统计
    <https://www.emacswiki.org/emacs/WordCount>
-   backlink
    副窗口怎么常显示
-   导出pdf
    中文显示<https://emacs-china.org/t/topic/2540/2>
    实时预览 <https://stackoverflow.com/questions/36183071/how-can-i-preview-markdown-in-emacs-in-real-time>
-   latex mode
-   公式
    安装mactex
    ```nil
    C-c C-x C-l   预览公式

    ```
    美化 <https://emacs-china.org/t/org-mode-latex-mode/22490>
    中文 <https://emacs-china.org/t/topic/2540/6>
    实时显示 <https://github.com/io12/org-fragtog>
    <https://superuser.com/questions/1038612/where-do-i-get-the-pdflatex-program-for-mac>
    <https://zhuanlan.zhihu.com/p/526795352?utm_id=0>
    <https://github.com/purcell/emacs.d/issues/714>
    <https://github.com/io12/org-fragtog>
-   全局搜索
    <https://emacs-china.org/t/topic/5618>


## 其他参考链接 {#其他参考链接}

buffer <http://incf19.com/yynotes/posts/2022-03-17-18-buffer%E7%AE%A1%E7%90%86%E5%92%8Cibuffer%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/index.html#org1ef9b10>
emacslisp <https://kangxiaoning.github.io/post/2021/02/learn-emacs-lisp-part-1/>
Org-roam User Manual <https://www.orgroam.com/manual.html#C-Compiler>
链接 <https://blog.csdn.net/wait_for_eva/article/details/113870853>
emacs china <https://emacs-china.org>
org-roam discourse <https://org-roam.discourse.group>
补全工具 <https://emacs-helm.github.io/helm/>
必备扩展 <https://www.zhihu.com/question/21943533>
rss <https://docs.rsshub.app/>
emacs笔记<https://pengpengxp.github.io/archive/before-2018-11-10/2017-06-19-my_emacs_and_lisp_wiki.html#orgcb79882>
purcell's config <https://github.com/purcell/emacs.d>
master emacs one year <https://github.com/redguardtoo/mastering-emacs-in-one-year-guide>
多媒体软件<https://github.com/emacs-eaf/emacs-application-framework>

[^fn:1]: <https://emacs.stackexchange.com/questions/271/what-is-the-difference-between-aquamacs-and-other-mac-versions-of-emacs>
[^fn:2]: <https://blog.csdn.net/itguangit/article/details/122192858>
[^fn:3]: <https://coldnight.github.io/dump-brain-with-emacs/posts/20220107175445-%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B_%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8_emacs_%E9%85%8D%E7%BD%AE%E7%AF%87>
[^fn:4]: <https://orgmode.org/manual/Exporting-Code-Blocks.html>
[^fn:5]: <http://holbrook.github.io/2012/04/12/emacs_orgmode_editor.html>
[^fn:6]: <https://blog.51cto.com/darksun/1355334>
[^fn:7]: <http://blog.lujun9972.win/blog/2016/12/10/emacs%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%A5%9E%E5%99%A8--dired%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/>
[^fn:8]: <https://github.com/abo-abo/org-download/issues/95>
[^fn:9]: <https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/>
[^fn:10]: <http://www.langdebuqing.com/emacs%20notebook/org-mode%20%E8%A1%A8%E6%A0%BC.html>
[^fn:11]: <https://help.jianguoyun.com/?p=2064>
[^fn:12]: <https://mp.weixin.qq.com/s/Q2uYIpMl_3yx6dhr5KpsuQ>
[^fn:13]: <https://emacs-china.org/t/topic/4266/5>
[^fn:14]: <https://emacs-china.org/t/org-files-git/19461>
[^fn:15]: <http://holbrook.github.io/2012/04/14/emacs_orgmode_task.html>
[^fn:16]: <https://www.cnblogs.com/quantumman/p/10808374.html>
[^fn:17]: <https://orgmode.org/manual/Using-column-view.html>
[^fn:18]: <https://ox-hugo.scripter.co/doc/hugo-section/>
[^fn:19]: <https://gohugo.io/hosting-and-deployment/hosting-on-github/>
[^fn:20]: <http://holbrook.github.io/2012/04/12/emacs_orgmode_editor.html>
[^fn:21]: <https://mp.ofweek.com/ic/a556714487227>
[^fn:22]: <https://zhuanlan.zhihu.com/p/556496150>
[^fn:23]: <https://emacs-china.org/t/magit-emacs-terminal-proxy/16942>
[^fn:24]: <https://kundeveloper.com/blog/buffer-files/>
[^fn:25]: <https://org-roam.discourse.group/t/how-to-rename-a-note-with-everything-updated-at-the-same-time/300/13>
[^fn:26]: <https://org-roam.discourse.group/t/how-to-rename-a-note-with-everything-updated-at-the-same-time/300/12>